<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    string output = File.ReadAllText(this.Host.ResolvePath("SignatureBuilder.AssemblyInfo.cs"));
    Regex pattern = new Regex("AssemblyVersion\\(\"(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<revision>\\d+)\\.(?<build>\\d+)\"\\)");
    MatchCollection matches = pattern.Matches(output);
    if( matches.Count == 1 )
    {
        major = Convert.ToInt32(matches[0].Groups["major"].Value);
        minor = Convert.ToInt32(matches[0].Groups["minor"].Value);
        revision = Convert.ToInt32(matches[0].Groups["revision"].Value);
        build = Convert.ToInt32(matches[0].Groups["build"].Value) + 1;

		dt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

        if( this.Host.ResolveParameterValue("-","-","BuildConfiguration") == "Release" )
        {
            major++;
        }
    }
#>

using System.Reflection;
using System.Resources;

// General Information
[assembly: AssemblyTitle("SignatureBuilder")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SignatureBuilder")]
[assembly: AssemblyCopyright("")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Version information
[assembly: AssemblyVersion("<#= this.major #>.<#= this.minor #>.<#= this.revision #>.<#= this.build #>")]
[assembly: AssemblyFileVersion("<#= this.major #>.<#= this.minor #>.<#= this.revision #>.<#= this.build #>")]
[assembly: AssemblyDescription("<#= this.dt #>")]
[assembly: NeutralResourcesLanguage( "en-US" )]

<#+
    int major = 10;
    int minor = 0;
    int revision = 5;
    int build = 1302;
	String dt = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
#>